name: Release

on:
  push:
    tags: ['v*']

env:
  TAG: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        node: [20]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: |
          npm ci
          npm run submodule

      - name: Build application
        run: |
          npm run build

      - name: Create environments
        env:
          ENV: ${{ secrets.ENV_PRODUCT }}
        run: |
          rm .env
          touch .env
          echo "$ENV" >> .env
          echo "VERSION=$TAG" >> .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Image Build and push to ECR
        id: docker-build
        env:
          IMAGE_TAG: ${{ github.ref_name }}
          REGISTRY: ${{ steps.ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_PRODUCT }}
        run: |
          IMAGE_NAME="$REGISTRY/$REPOSITORY:$IMAGE_TAG"
          cd docker/server
          sh scripts/build.sh $IMAGE_NAME
          sh scripts/push.sh $IMAGE_NAME

  deploy:
    needs: build

    runs-on: ubuntu-22.04

    env:
      BUCKET: ${{ secrets.AWS_S3_BUCKET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Create profile and zip files
        env:
          IMAGE_TAG: ${{ github.ref_name }}
          REGISTRY: ${{ steps.ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY_PRODUCT }}
        run: |
          ZIP_NAME="product_$TAG_$GITHUB_SHA"
          IMAGE_NAME="$REPOSITORY:$IMAGE_TAG"
          IMAGE_PATH="$REGISTRY/$IMAGE_NAME"
          touch profile
          echo "ZIP_NAME=$ZIP_NAME" >> profile
          echo "IMAGE_NAME=$IMAGE_NAME" >> profile
          echo "IMAGE_PATH=$IMAGE_PATH" >> profile
          zip -r $ZIP_NAME.zip profile appspec*

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push deploy to S3
        run: |
          source profile
          unzip $ZIP_NAME.zip $ZIP_NAME
          aws deploy push \
            --application-name stdte-ts-server \
            --s3-location s3://$BUCKET/$ZIP_NAME.zip \
            --source $ZIP_NAME

      - name: Create Deployment
        run: |
          source profile
          aws deploy create-deployment \
            --application-name stdte-ts-server \
            --deployment-group-name product \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --s3-location bucket=$BUCKET,bundleType=zip,key=$ZIP_NAME.zip
